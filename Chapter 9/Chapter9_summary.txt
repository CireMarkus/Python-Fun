Chapter 9 introduced the concept of object oriented programming and it's benefits compared to other concepts. 

Section 9.1 discusses the different programing paradigms and their strengths and weaknesses. Procedural programming is when the programmer gives the computer a list of commands that it runs in sequential order and there is no real way to reuse the code without typing in the commands again. Modular programming is the usage of functions to modulate the program and allows for reuse of code but does not provide good data hiding, this means that there is a possibility of data being unintentionally altered and causing problems in the program. OOP or object-oriented programming handles all these issues through the uses of classes and data hiding. This allows the programmer to group data together that is similar in a class and manipulate it within said class and lowers the chances of the data being altered by anything outside of the class. 

Section 9.2 discusses the idea of creating new data types. The creation of new data types is achieved through the creation of classes.

Section 9.3 discusses the attributes, functions, and class diagram. The class diagram is used by programmers to facilitate the creation of a new class. it helps the programmer name the class, determine what attributes the class will have, and what functions the class will use to access and manipulate those attributes. Attributes are the characteristics of a class and are usually the variables that will hold the data stored in the object. Functions are the methods of that class that are used to access, view, and manipulate the data within an class and allow the programmer to have a buffer between the user and the data this allows the programmer to hide data from the user and keep critical data from being manipulated.

Section 9.4 discusses the elements of OOP, classes are explained first they are the backbone of OOP. Classes are real or virtual entity that contains all the relevant information to complete the task at hand. They have very strict boundaries about what data they store. Next objects are discussed, objects are instances of the of their classes, aka the classes put into use, they are what the program creates based on the information the class can hold. They communicate through their methods with each other and the user. Encapsulation is the grouping together of data and functions, it is one of the core principles of OOP along with classes, it makes the handling and management of objects and classes a lot simpler. Instead of having to go through lines of code to find a problem, you edit the class and all objects there forth will have the attributes that have been added or corrected. Data hiding is the concept of keeping certain hidden inside the class. This is entirely up to the programmers discretion but it allows the programmer to create a buffer between the data and the user. Inheritance allows the programmer to create classes from another class, this created class, or child class, will have all the attributes of the parent class in addition to its own specific ones. Polymorphism is the ability to have many different forms, a good example of this is function or operator overloading. Where you take a function or operator like the '+' and you can use it for more than one thing. In '+' case it is used for addition and for the concatenation of strings. Finally, OOP allows you to make your code extremely reusable, you can use existing classes to create new ones, you can use existing operators to do new thing, it makes the code you create compact and easy to navigate. 

In conclusion the programmer needs to keep in mind the entities that will be worked on. There is no reason to go overboard in the initial building of the class, if created correctly things can be added to the class later with ease.